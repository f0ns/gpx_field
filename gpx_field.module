<?php
/**
 * @file
 * Creates gpx field functionality.
 */

/**
 * Implements hook_theme().
 */
function gpx_field_theme($existing, $type, $theme, $path) {
  return array(
    'gpx_field_formatter_full' => array(
      'render element' => 'element',
    ),
    'gpx_field_details' => array(
      'variables' => array(
        'elevation' => 0,
        'demotion' => 0,
        'highest_point' => 0,
        'lowest_point' => 0,
        'distance' => 0,
      ),
      'template' => 'gpx_field-details',
    ),
    'gpx_field_downloads' => array(
      'variables' => array(
        'gpx_file_url' => '',
        'kml_file_url' => '',
        'gpx_file_link' => '',
        'kml_file_link' => '',
      ),
      'template' => 'gpx_field-downloads',
    ),
  );
}

/**
 * Implements hook_field_info().
 */
function gpx_field_field_info() {
  return array(
    'gpx' => array(
      'label' => t('GPX'),
      'description' => t('This field stores the GPX file source and get the data from it.'),
      'settings' => array(
        'uri_scheme' => variable_get('file_default_scheme', 'public'),
      ),
      'instance_settings' => array(
        'file_directory' => '',
        'file_extensions' => 'gpx',
        'max_filesize' => '',
        'gpx_download' => 0,
        'gpx_download_title' => t('Download GPX file'),
        'kml_download' => 0,
        'kml_download_title' => t('Download KML file'),
      ),
      'default_widget' => 'gpx_field_widget_upload',
      'default_formatter' => 'gpx_field_formatter_full',
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function gpx_field_field_settings_form($field, $instance) {
  $defaults = field_info_field_settings($field['type']);
  $settings = array_merge($defaults, $field['settings']);

  $scheme_options = array();
  foreach (file_get_stream_wrappers(STREAM_WRAPPERS_WRITE_VISIBLE) as $scheme => $stream_wrapper) {
    $scheme_options[$scheme] = $stream_wrapper['name'];
  }
  $form['uri_scheme'] = array(
    '#type' => 'radios',
    '#title' => t('Upload destination'),
    '#options' => $scheme_options,
    '#default_value' => $settings['uri_scheme'],
    '#description' => t('Select where the final files should be stored. Private file storage has significantly more overhead than public files, but allows restricted access to files within this field.'),
  );

  return $form;
}

/**
 * Implements hook_field_instance_settings_form().
 */
function gpx_field_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];

  // Use the file field instance settings form as a basis.
  $form = file_field_instance_settings_form($field, $instance);

  // Remove the description and the extensions form elements.
  unset($form['description_field'], $form['file_extensions']);

  // Add title and alt configuration options.
  $form['gpx_download'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable <em>GPX</em> file download'),
    '#default_value' => $settings['gpx_download'],
    '#weight' => 10,
  );
  $form['gpx_download_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title for GPX download'),
    '#default_value' => $settings['gpx_download_title'],
    '#description' => t('If token module is enabled and your entity supports tokens, you can use tokens too. Check token list below the textfields.'),
    '#states' => array(
      // Only show this field when the 'gpx_download' checkbox is enabled.
      'visible' => array(
        ':input[name="instance[settings][gpx_download]"]' => array('checked' => TRUE),
      ),
      // This field is required if 'gpx_download' checkbox is enabled.
      'required' => array(
        ':input[name="instance[settings][gpx_download]"]' => array('checked' => TRUE),
      ),
    ),
    '#weight' => 11,
  );
  $form['kml_download'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable <em>KML</em> file download'),
    '#default_value' => $settings['kml_download'],
    '#weight' => 12,
  );
  $form['kml_download_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title for KML download'),
    '#description' => t('If token module is enabled and your entity supports tokens, you can use tokens too. Check token list below the textfields.'),
    '#default_value' => $settings['kml_download_title'],
    '#states' => array(
      // Only show this field when the 'kml_download' checkbox is enabled.
      'visible' => array(
        ':input[name="instance[settings][kml_download]"]' => array('checked' => TRUE),
      ),
      // This field is required if 'kml_download' checkbox is enabled.
      'required' => array(
        ':input[name="instance[settings][kml_download]"]' => array('checked' => TRUE),
      ),
    ),
    '#weight' => 13,
  );

  // Token support.
  if (module_exists('token')) {
    $form['token_help'] = array(
      '#title' => t('Replacement patterns'),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#description' => t('Prefer raw-text replacements for text to avoid problems with HTML entities!'),
      '#weight' => 14,
      '#states' => array(
        // Only show this field when 'gpx_download' or 'kml_download' checkbox
        // is enabled.
        'invisible' => array(
          ':input[name="instance[settings][gpx_download]"]' => array('checked' => FALSE),
          ':input[name="instance[settings][kml_download]"]' => array('checked' => FALSE),
        ),
      ),
    );

    $form['token_help']['help'] = array(
      '#theme' => 'token_tree',
      '#token_types' => array($instance['entity_type']),
    );
  }

  return $form;
}

/**
 * Implements hook_field_load().
 */
function gpx_field_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
  file_field_load($entity_type, $entities, $field, $instances, $langcode, $items, $age);
}

/**
 * Implements hook_field_presave().
 */
function gpx_field_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  file_field_presave($entity_type, $entity, $field, $instance, $langcode, $items);

  // Save calculated data.
  foreach ($items as &$item) {
    // Load the uploaded file.
    $gpx_file = file_load($item['fid']);
    $gpx_details = gpx_field_get_gpx_file_details($gpx_file);

    $item['elevation'] = $gpx_details['elevation'];
    $item['demotion'] = $gpx_details['demotion'];
    $item['highest_point'] = $gpx_details['highest_point'];
    $item['lowest_point'] = $gpx_details['lowest_point'];
    $item['distance'] = $gpx_details['distance'];

    gpx_field_generate_kml_file($gpx_file, $gpx_details);
  }
}

/**
 * Implements hook_field_insert().
 */
function gpx_field_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items) {
  file_field_insert($entity_type, $entity, $field, $instance, $langcode, $items);
}

/**
 * Implements hook_field_update().
 */
function gpx_field_field_update($entity_type, $entity, $field, $instance, $langcode, &$items) {
  file_field_update($entity_type, $entity, $field, $instance, $langcode, $items);
}

/**
 * Implements hook_field_delete().
 */
function gpx_field_field_delete($entity_type, $entity, $field, $instance, $langcode, &$items) {
  file_field_delete($entity_type, $entity, $field, $instance, $langcode, $items);
}

/**
 * Implements hook_field_delete_revision().
 */
function gpx_field_field_delete_revision($entity_type, $entity, $field, $instance, $langcode, &$items) {
  file_field_delete_revision($entity_type, $entity, $field, $instance, $langcode, $items);
}

/**
 * Implements hook_field_is_empty().
 */
function gpx_field_field_is_empty($item, $field) {
  return file_field_is_empty($item, $field);
}

/**
 * Implements hook_field_widget_info().
 */
function gpx_field_field_widget_info() {
  return array(
    'gpx_field_widget_upload' => array(
      'label' => t('Upload'),
      'field types' => array('gpx'),
      'settings' => array(
        'progress_indicator' => 'throbber',
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_settings_form().
 */
function gpx_field_field_widget_settings_form($field, $instance) {
  // Use the file widget settings form.
  return file_field_widget_settings_form($field, $instance);
}

/**
 * Implements hook_field_widget_form().
 */
function gpx_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  // Add display_field setting to field because file_field_widget_form() assumes it is set.
  $field['settings']['display_field'] = 0;

  $elements = file_field_widget_form($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);

  foreach (element_children($elements) as $delta) {
    $elements[$delta]['#upload_validators']['file_validate_extensions'][0] = $instance['settings']['file_extensions'];

    // Add all extra functionality provided by the gpx widget.
    $elements[$delta]['#process'][] = 'gpx_field_widget_process';
  }

  if ($field['cardinality'] == 1) {
    // If there's only one field, return it as delta 0.
    if (empty($elements[0]['#default_value']['fid'])) {
      $elements[0]['#description'] = theme('file_upload_help', array('description' => $instance['description'], 'upload_validators' => $elements[0]['#upload_validators']));
    }
  }
  else {
    $elements['#file_upload_description'] = theme('file_upload_help', array('upload_validators' => $elements[0]['#upload_validators']));
  }
  return $elements;
}

/**
 * Expands the gpx_field_widget_upload type to include the download fields.
 */
function gpx_field_widget_process($element, &$form_state, $form) {
  // @todo
  return $element;
}

/**
 * Implements hook_field_formatter_info().
 */
function gpx_field_field_formatter_info() {
  $formatters = array(
    'gpx_field_formatter_full' => array(
      'label' => t('Full'),
      'field types' => array('gpx'),
    ),
  );

  return $formatters;
}

/**
 * Implements hook_field_formatter_view().
 */
function gpx_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  foreach ($items as $delta => $item) {
    // Load the item's file.
    $gpx_file = file_load($item['fid']);
    $gpx_details = gpx_field_get_gpx_file_details($gpx_file);
    $element[$delta] = array(
      '#theme' => 'gpx_field_formatter_full',
      '#item' => $item,
      '#gpx_details' => $gpx_details,
      '#gpx_file' => $gpx_file,
      '#settings' => $instance['settings'],
      '#gpx_file_title' => token_replace($instance['settings']['gpx_download_title'], array($entity_type => $entity)),
      '#kml_file_title' => token_replace($instance['settings']['kml_download_title'], array($entity_type => $entity)),
    );
  }

  return $element;
}

/**
 * Renders the full formatter for GPX field.
 */
function theme_gpx_field_formatter_full($variables) {
  // Load details.
  $gpx_details = $variables['element']['#gpx_details'];
  $settings = $variables['element']['#settings'];

  $out = array(
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'gpx_field') . '/gpx_field.js' => array(
          'scope' => 'footer',
        ),
        'https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false' => array(
          'type' => 'external',
          'scope' => 'header',
        ),
      ),
      'css' => array(drupal_get_path('module', 'gpx_field') . '/gpx_field.css'),
    ),
  );

  $out[] = array(
    '#markup' => '<h3 class="gpx-title">' . t('Characteristic') . '</h3>',
  );
  $out[] = array(
    '#theme' => 'gpx_field_details',
    '#elevation' => $variables['element']['#item']['elevation'],
    '#demotion' => $variables['element']['#item']['demotion'],
    '#highest_point' => $variables['element']['#item']['highest_point'],
    '#lowest_point' => $variables['element']['#item']['lowest_point'],
    '#distance' => $variables['element']['#item']['distance'],
  );

  // Map.
  $out[] = array(
    '#markup' => '<h3 class="gpx-title">' . t('Map') . '</h3>',
  );
  $map_id = "gpx-map-{$variables['element']['#item']['fid']}";
  $out[] = array(
    '#markup' => '<div class="gpx-map" id="' . $map_id . '"></div>',
  );

  $map_settings = array(
    'fid_' . $variables['element']['#item']['fid'] => array(
      'element' => $map_id,
      'points' => $gpx_details['points'],
    ),
  );

  drupal_add_js(array('gpxField' => array('gpxMaps' => $map_settings)), 'setting');

  // Charts.
  $out[] = array(
    '#markup' => '<h3 class="gpx-title">' . t('Charts') . '</h3>',
  );
  libraries_load('highcharts');

  // Level chart.
  $level_chart_id = "gpx-level-chart-{$variables['element']['#item']['fid']}";
  $out[] = array(
    '#markup' => '<div class="gpx-level-chart gpx-chart" id="' . $level_chart_id . '"></div>',
  );

  $level_chart_settings = array(
    'fid_' . $variables['element']['#item']['fid'] => array(
      'element' => $level_chart_id,
      'settings' => array(
        'title' => array(
          'text' => t('Level diagram'),
        ),
        'xAxis' => array(
          'title' => array(
            'text' => t('Distance (km)'),
          ),
          'categories' => $gpx_details['distance_array'],
        ),
        'yAxis' => array(
          'title' => array(
            'text' => t('Height (m)'),
          ),
        ),
        'tooltip' => array(
          'valueSuffix' => ' m',
          'headerFormat' => '<span style="font-size: 10px">{point.key} km</span><br/>',
        ),
        'series' => array(
          array(
            'data' => $gpx_details['ele_array'],
            'name' => t('Height'),
          ),
        ),
      ),
    ),
  );

  drupal_add_js(array('gpxField' => array('gpxFieldLevelCharts' => $level_chart_settings)), 'setting');

  // Difficulty chart.
  $difficulty_chart_id = "gpx-difficulty-chart-{$variables['element']['#item']['fid']}";
  $out[] = array(
    '#markup' => '<div class="gpx-difficulty-chart gpx-chart" id="' . $difficulty_chart_id . '"></div>',
  );

  $difficulty_chart_settings = array(
    'fid_' . $variables['element']['#item']['fid'] => array(
      'element' => $difficulty_chart_id,
      'settings' => array(
        'title' => array(
          'text' => t('Levels'),
        ),
        'chart' => array(
          'type' => 'column',
        ),
        'xAxis' => array(
          'title' => array(
            'text' => t('Difficulty'),
          ),
          'categories' => array(
            t('Descent'),
            t('Downhill'),
            t('Flat'),
            t('Uphill'),
            t('Rise'),
          ),
        ),
        'yAxis' => array(
          'title' => array(
            'text' => t('Distance (km)'),
          ),
        ),
        'tooltip' => array(
          'valueSuffix' => ' km',
          'valueDecimals' => 2,
        ),
        'series' => array(
          array(
            'data' => array_values($gpx_details['difficulty_array']),
            'name' => t('Distance'),
          ),
        ),
      ),
    ),
  );

  drupal_add_js(array('gpxField' => array('gpxFieldDifficultyCharts' => $difficulty_chart_settings)), 'setting');

  if ($settings['gpx_download'] || $settings['kml_download']) {
    // Downloads.
    $out[] = array(
      '#markup' => '<h3 class="gpx-title">' . t('Downloads') . '</h3>',
    );
    $out[] = array(
      '#theme' => 'gpx_field_downloads',
      '#gpx_file_url' => $settings['gpx_download'] ? file_create_url($variables['element']['#gpx_file']->uri) : '',
      '#gpx_file_link' => $settings['gpx_download'] ? l($variables['element']['#gpx_file_title'], file_create_url($variables['element']['#gpx_file']->uri)) : '',
      '#kml_file_url' => $settings['kml_download'] ? file_create_url(file_default_scheme() . '://gpx-kml-files/' . $variables['element']['#gpx_file']->filename . '.kml') : '',
      '#kml_file_link' => $settings['kml_download'] ? l($variables['element']['#kml_file_title'], file_create_url(file_default_scheme() . '://gpx-kml-files/' . $variables['element']['#gpx_file']->filename . '.kml')) : '',
    );
  }

  return drupal_render($out);
}

/**
 * Implements hook_libraries_info().
 */
function gpx_field_libraries_info() {
  $libraries['highcharts'] = array(
    'name' => 'Highcharts',
    'vendor url' => 'http://www.highcharts.com/',
    'download url' => 'http://www.highcharts.com/download',
    'path' => 'js',
    'version arguments' => array(
      'file' => 'js/highcharts.js',
      'pattern' => '/Highcharts JS v([0-9\.]*)/',
      'lines' => 2,
    ),
    'files' => array(
      'js' => array(
        'highcharts.js',
      ),
    ),
    'variants' => array(
      'minified' => array(
        'files' => array(
          'js' => array(
            'highcharts.js',
          ),
        ),
      ),
      'source' => array(
        'files' => array(
          'js' => array(
            'highcharts.src.js',
          ),
        ),
      ),
    ),
  );

  return $libraries;
}

/**
 * Returns with the details of the gpx file.
 *
 * @param $gpx_file
 *   The gpx file object.
 *
 * @return
 *   An array with the following keys:
 *   - elevation
 *   - demotion
 *   - highest_point
 *   - lowest_point
 *   - distance
 *   - distance_array
 *   - ele_array
 *   - difficulty_array
 *   - points
 */
function gpx_field_get_gpx_file_details($gpx_file) {
  // Always store the previous trackpoint.
  $point_before = NULL;
  // Iterator number.
  $i = 0;
  // Default divisor number.
  $divisor = 1;

  // File details.
  $highest_point = NULL;
  $lowest_point = NULL;
  $distance = 0;
  $demotion = 0;
  $elevation = 0;
  // Difficulty array.
  $difficulty = array(
    'last_distance' => 0,
    'last_high' => 0,
    'difficulties' => array(
      'descent' => 0,
      'downhill' => 0,
      'flat' => 0,
      'uphill' => 0,
      'rise' => 0,
    ),
  );

  // Trackpoint data.
  $distance_array = array();
  $ele_array = array();
  $points = array();

  // Load the uploaded file.
  $doc = new DOMDocument();
  $doc->load($gpx_file->uri);

  // Get all trackpoint and iterate them.
  $trackpoints = $doc->getElementsByTagName('trkpt');

  // Calculate the optimum of divisor because highchart js works well with
  // maximum 100 points.
  $length = $trackpoints->length;
  if ($length > 100) {
    $divisor = ceil($length / 100);
  }

  foreach ($trackpoints as $trkpt) {
    // Current high.
    $eles = $trkpt->getElementsByTagName('ele');
    $ele = $eles->item(0)->nodeValue;

    // Calculate lowest point.
    if (is_null($lowest_point)) {
      $lowest_point = $ele;
    }
    elseif ($ele < $lowest_point) {
      $lowest_point = $ele;
    }

    // Calculate highest point.
    if (is_null($highest_point)) {
      $highest_point = $ele;
    }
    elseif ($ele > $highest_point) {
      $highest_point = $ele;
    }

    // From the second element.
    if (!is_null($point_before)) {
      // Previous high.
      $eles_previous = $point_before->getElementsByTagName('ele');
      $ele_previous = $eles_previous->item(0)->nodeValue;

      // Earth's radius and the pi.
      $r = 6378;
      $pi = atan2(1, 1) * 4;

      // Calculate distance.
      $a1 = $point_before->getAttribute('lat') * ($pi / 180);
      $a2 = $trkpt->getAttribute('lat') * ($pi / 180);
      $b1 = $point_before->getAttribute('lon') * ($pi / 180);
      $b2 = $trkpt->getAttribute('lon') * ($pi / 180);

      if (($a1 == $a2) && ($b1 == $b2)) {
        $delta = 0;
      }
      else {
        $toacos = cos($a1) * cos($b1) * cos($a2) * cos($b2);
        $toacos += cos($a1) * sin($b1) * cos($a2) * sin($b2);
        $toacos += sin($a1) * sin($a2);

        if ($toacos > 1) {
         $delta = 0;
        }
        else {
         $delta = acos($toacos) * $r;
        }
      }
      $distance += $delta;

      // Calculate demotion.
      if (($ele - $ele_previous) < 0) {
        $demotion += ($ele - $ele_previous);
      }

      // Calculate elevation.
      if (($ele - $ele_previous) > 0) {
        $elevation += ($ele - $ele_previous);
      }

      if (++$i == $divisor) {
        $distance_array[] = (int) $distance;
        $ele_array[] = (int) $ele;
        $i = 0;
      }
    }

    // Check difficulty but high difference between 100 meters.
    if (($distance * 1000) - ($difficulty['last_distance'] * 1000) >= 100) {
      $difference = $difficulty['last_high'] - $ele;
      $distance_diff = $distance - $difficulty['last_distance'];

      // The distance is flat if the difference between -2 and 2.
      if ($difference < 2 && $difference > -2) {
        $difficulty['difficulties']['flat'] += $distance_diff;
      }
      // The distance is uphill if the difference between 2 and 10.
      if ($difference >= 2 && $difference < 10) {
        $difficulty['difficulties']['uphill'] += $distance_diff;
      }
      // The distance is downhill if the difference between -2 and -10.
      if ($difference <= -2 && $difference > -10) {
        $difficulty['difficulties']['downhill'] += $distance_diff;
      }
      // The distance is rise if the difference more than 10.
      if ($difference >= 10) {
        $difficulty['difficulties']['rise'] += $distance_diff;
      }
      // The distance is descent if the difference less than -10.
      if ($difference <= -10) {
        $difficulty['difficulties']['descent'] += $distance_diff;
      }

      // Store current variables.
      $difficulty['last_distance'] = $distance;
      $difficulty['last_high'] = $ele;
    }

    // Store all points.
    $points[] = array(
      'lon' => $trkpt->getAttribute('lon'),
      'lat' => $trkpt->getAttribute('lat'),
    );
    // Store the previous point for the distance calculating.
    $point_before = $trkpt;
  }

  return array(
    'elevation' => round($elevation, 2),
    'demotion' => round($demotion, 2),
    'highest_point' => $highest_point,
    'lowest_point' => $lowest_point,
    'distance' => round($distance, 2),
    'distance_array' => $distance_array,
    'ele_array' => $ele_array,
    'difficulty_array' => $difficulty['difficulties'],
    'points' => $points,
  );
}

/**
 * Generates the kml file from the gpx file.
 *
 * @param $gpx_file
 *   The gpf file object.
 * @param $gpx_details
 *   An array with the following keys:
 *   - elevation
 *   - demotion
 *   - highest_point
 *   - lowest_point
 *   - distance
 *   - distance_array
 *   - ele_array
 *   - difficulty_array
 *   - points
 */
function gpx_field_generate_kml_file($gpx_file, $gpx_details) {
  if (!empty($gpx_details['points'])) {
    $doc = new DOMDocument('1.0', 'UTF-8');
    // Nice output.
    $doc->formatOutput = TRUE;

    $kml = $doc->createElementNS('http://earth.google.com/kml/2.1','kml');
    $kml = $doc->appendChild($kml);

    $root = $doc->createElement('Document');
    $root = $doc->appendChild($root);

    $root->appendChild($doc->createElement('name', $gpx_file->filename));
    $root->appendChild($doc->createElement('open','1'));

    $style = $doc->createElement('Style');
    $style->setAttribute('id', 'lineStyle');
    $linestyle = $doc->createElement('LineStyle');
    $linestyle->appendChild($doc->createElement('color', '6422FF22'));
    $linestyle->appendChild($doc->createElement('width', '4'));

    $style->appendChild($linestyle);
    $root->appendChild($style);

    $folder = $doc->createElement('Folder');
    $folder->appendChild($doc->createElement('open','1'));
    $folder->appendChild($doc->createElement('name', $gpx_file->filename));

    $placemark = $doc->createElement('Placemark');
    $placemark->appendChild($doc->createElement('visibility','1'));
    $placemark->appendChild($doc->createElement('name', $gpx_file->filename));

    $style = $doc->createElement('Style');
    $iconstyle = $doc->createElement('IconStyle');
    $icon = $doc->createElement('Icon');
    $icon->appendChild($doc->createElement('href', 'root://icons/palette-4.png'));
    $icon->appendChild($doc->createElement('y', '32'));
    $icon->appendChild($doc->createElement('w', '32'));
    $icon->appendChild($doc->createElement('h', '32'));

    $iconstyle->appendChild($icon);
    $style->appendChild($iconstyle);
    $placemark->appendChild($style);

    $point = $doc->createElement('Point');
    $point->appendChild($doc->createElement('extrude', '1'));
    $point->appendChild($doc->createElement('coordinates', implode(',', $gpx_details['points'][0])));

    $placemark->appendChild($point);

    $placemark->appendChild($doc->createElement('description', t('Distance: @distance km, D+: @elevation m, D-: @demotion m',
      array('@distance' => $gpx_details['distance'], '@elevation' => $gpx_details['elevation'], '@demotion' => $gpx_details['demotion']))));
    $folder->appendChild($placemark);

    $placemark = $doc->createElement('Placemark');
    $placemark->appendChild($doc->createElement('name', 'Path'));
    $placemark->appendChild($doc->createElement('styleUrl','#lineStyle'));

    $linestring = $doc->createElement('LineString');
    $linestring->appendChild($doc->createElement('tessellate','1'));
    $coordinates = '';
    foreach ($gpx_details['points'] as $point) {
      $coordinates .= implode(',', $point) . ' ';
    }
    $linestring->appendChild($doc->createElement('coordinates', $coordinates));

    $placemark->appendChild($linestring);
    $folder->appendChild($placemark);
    $root->appendChild($folder);
    $kml->appendChild($root);

    $doc->save(file_default_scheme() . '://gpx-kml-files/' . $gpx_file->filename . '.kml');
  }
}
